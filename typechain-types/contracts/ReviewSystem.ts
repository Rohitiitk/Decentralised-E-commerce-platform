/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ReviewSystem {
  export type ReviewStruct = {
    buyer: PromiseOrValue<string>;
    productId: PromiseOrValue<BigNumberish>;
    rating: PromiseOrValue<BigNumberish>;
    comment: PromiseOrValue<string>;
  };

  export type ReviewStructOutput = [string, BigNumber, number, string] & {
    buyer: string;
    productId: BigNumber;
    rating: number;
    comment: string;
  };
}

export interface ReviewSystemInterface extends utils.Interface {
  functions: {
    "getAverageRating(uint256)": FunctionFragment;
    "getReviewCount(uint256)": FunctionFragment;
    "getReviews(uint256)": FunctionFragment;
    "productReviews(uint256,uint256)": FunctionFragment;
    "submitReview(uint256,uint8,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAverageRating"
      | "getReviewCount"
      | "getReviews"
      | "productReviews"
      | "submitReview"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAverageRating",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReviewCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReviews",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "productReviews",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitReview",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAverageRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReviewCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReviews", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productReviews",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitReview",
    data: BytesLike
  ): Result;

  events: {
    "ReviewSubmitted(uint256,address,uint8,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReviewSubmitted"): EventFragment;
}

export interface ReviewSubmittedEventObject {
  productId: BigNumber;
  buyer: string;
  rating: number;
  comment: string;
}
export type ReviewSubmittedEvent = TypedEvent<
  [BigNumber, string, number, string],
  ReviewSubmittedEventObject
>;

export type ReviewSubmittedEventFilter = TypedEventFilter<ReviewSubmittedEvent>;

export interface ReviewSystem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReviewSystemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAverageRating(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getReviewCount(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReviews(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ReviewSystem.ReviewStructOutput[]]>;

    productReviews(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, string] & {
        buyer: string;
        productId: BigNumber;
        rating: number;
        comment: string;
      }
    >;

    submitReview(
      productId: PromiseOrValue<BigNumberish>,
      rating: PromiseOrValue<BigNumberish>,
      comment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getAverageRating(
    productId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getReviewCount(
    productId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReviews(
    productId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ReviewSystem.ReviewStructOutput[]>;

  productReviews(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, string] & {
      buyer: string;
      productId: BigNumber;
      rating: number;
      comment: string;
    }
  >;

  submitReview(
    productId: PromiseOrValue<BigNumberish>,
    rating: PromiseOrValue<BigNumberish>,
    comment: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAverageRating(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getReviewCount(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReviews(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ReviewSystem.ReviewStructOutput[]>;

    productReviews(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number, string] & {
        buyer: string;
        productId: BigNumber;
        rating: number;
        comment: string;
      }
    >;

    submitReview(
      productId: PromiseOrValue<BigNumberish>,
      rating: PromiseOrValue<BigNumberish>,
      comment: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ReviewSubmitted(uint256,address,uint8,string)"(
      productId?: null,
      buyer?: PromiseOrValue<string> | null,
      rating?: null,
      comment?: null
    ): ReviewSubmittedEventFilter;
    ReviewSubmitted(
      productId?: null,
      buyer?: PromiseOrValue<string> | null,
      rating?: null,
      comment?: null
    ): ReviewSubmittedEventFilter;
  };

  estimateGas: {
    getAverageRating(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReviewCount(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReviews(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    productReviews(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitReview(
      productId: PromiseOrValue<BigNumberish>,
      rating: PromiseOrValue<BigNumberish>,
      comment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAverageRating(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReviewCount(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReviews(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    productReviews(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitReview(
      productId: PromiseOrValue<BigNumberish>,
      rating: PromiseOrValue<BigNumberish>,
      comment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
