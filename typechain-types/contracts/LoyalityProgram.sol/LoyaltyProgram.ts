/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface LoyaltyProgramInterface extends utils.Interface {
  functions: {
    "adjustLoyaltyBalance(address,uint256)": FunctionFragment;
    "calculateLoyaltyTokens(uint256)": FunctionFragment;
    "getLoyaltyBalance(address)": FunctionFragment;
    "issueLoyaltyTokens(address,uint256)": FunctionFragment;
    "loyaltyBalances(address)": FunctionFragment;
    "loyaltyToken()": FunctionFragment;
    "purchaseCount(address)": FunctionFragment;
    "redeemLoyaltyTokens(uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adjustLoyaltyBalance"
      | "calculateLoyaltyTokens"
      | "getLoyaltyBalance"
      | "issueLoyaltyTokens"
      | "loyaltyBalances"
      | "loyaltyToken"
      | "purchaseCount"
      | "redeemLoyaltyTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adjustLoyaltyBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLoyaltyTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoyaltyBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "issueLoyaltyTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "loyaltyBalances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "loyaltyToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLoyaltyTokens",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustLoyaltyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLoyaltyTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoyaltyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueLoyaltyTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loyaltyBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loyaltyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemLoyaltyTokens",
    data: BytesLike
  ): Result;

  events: {
    "LoyaltyTokensIssued(address,uint256)": EventFragment;
    "LoyaltyTokensRedeemed(address,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LoyaltyTokensIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoyaltyTokensRedeemed"): EventFragment;
}

export interface LoyaltyTokensIssuedEventObject {
  buyer: string;
  amount: BigNumber;
}
export type LoyaltyTokensIssuedEvent = TypedEvent<
  [string, BigNumber],
  LoyaltyTokensIssuedEventObject
>;

export type LoyaltyTokensIssuedEventFilter =
  TypedEventFilter<LoyaltyTokensIssuedEvent>;

export interface LoyaltyTokensRedeemedEventObject {
  buyer: string;
  amount: BigNumber;
  redemptionType: string;
}
export type LoyaltyTokensRedeemedEvent = TypedEvent<
  [string, BigNumber, string],
  LoyaltyTokensRedeemedEventObject
>;

export type LoyaltyTokensRedeemedEventFilter =
  TypedEventFilter<LoyaltyTokensRedeemedEvent>;

export interface LoyaltyProgram extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LoyaltyProgramInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjustLoyaltyBalance(
      _buyer: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateLoyaltyTokens(
      _purchaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLoyaltyBalance(
      _buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    issueLoyaltyTokens(
      _buyer: PromiseOrValue<string>,
      _purchaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    loyaltyBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    loyaltyToken(overrides?: CallOverrides): Promise<[string]>;

    purchaseCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    redeemLoyaltyTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _redemptionType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  adjustLoyaltyBalance(
    _buyer: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateLoyaltyTokens(
    _purchaseAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLoyaltyBalance(
    _buyer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  issueLoyaltyTokens(
    _buyer: PromiseOrValue<string>,
    _purchaseAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  loyaltyBalances(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  loyaltyToken(overrides?: CallOverrides): Promise<string>;

  purchaseCount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeemLoyaltyTokens(
    _amount: PromiseOrValue<BigNumberish>,
    _redemptionType: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adjustLoyaltyBalance(
      _buyer: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateLoyaltyTokens(
      _purchaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoyaltyBalance(
      _buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueLoyaltyTokens(
      _buyer: PromiseOrValue<string>,
      _purchaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    loyaltyBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loyaltyToken(overrides?: CallOverrides): Promise<string>;

    purchaseCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemLoyaltyTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _redemptionType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LoyaltyTokensIssued(address,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      amount?: null
    ): LoyaltyTokensIssuedEventFilter;
    LoyaltyTokensIssued(
      buyer?: PromiseOrValue<string> | null,
      amount?: null
    ): LoyaltyTokensIssuedEventFilter;

    "LoyaltyTokensRedeemed(address,uint256,string)"(
      buyer?: PromiseOrValue<string> | null,
      amount?: null,
      redemptionType?: null
    ): LoyaltyTokensRedeemedEventFilter;
    LoyaltyTokensRedeemed(
      buyer?: PromiseOrValue<string> | null,
      amount?: null,
      redemptionType?: null
    ): LoyaltyTokensRedeemedEventFilter;
  };

  estimateGas: {
    adjustLoyaltyBalance(
      _buyer: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateLoyaltyTokens(
      _purchaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoyaltyBalance(
      _buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueLoyaltyTokens(
      _buyer: PromiseOrValue<string>,
      _purchaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    loyaltyBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loyaltyToken(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemLoyaltyTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _redemptionType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustLoyaltyBalance(
      _buyer: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateLoyaltyTokens(
      _purchaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoyaltyBalance(
      _buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueLoyaltyTokens(
      _buyer: PromiseOrValue<string>,
      _purchaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    loyaltyBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loyaltyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemLoyaltyTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _redemptionType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
