/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ProductListing {
  export type ProductStruct = {
    id: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    metadataHash: PromiseOrValue<string>;
  };

  export type ProductStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    string
  ] & {
    id: BigNumber;
    seller: string;
    name: string;
    price: BigNumber;
    metadataHash: string;
  };
}

export interface ProductListingInterface extends utils.Interface {
  functions: {
    "addProduct(string,uint256,string)": FunctionFragment;
    "getProduct(uint256)": FunctionFragment;
    "getProductsBySeller(address)": FunctionFragment;
    "productCount()": FunctionFragment;
    "products(uint256)": FunctionFragment;
    "sellerProducts(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addProduct"
      | "getProduct"
      | "getProductsBySeller"
      | "productCount"
      | "products"
      | "sellerProducts"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addProduct",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getProduct",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductsBySeller",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "productCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sellerProducts",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProductsBySeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellerProducts",
    data: BytesLike
  ): Result;

  events: {
    "ProductAdded(uint256,address,string,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProductAdded"): EventFragment;
}

export interface ProductAddedEventObject {
  id: BigNumber;
  seller: string;
  name: string;
  price: BigNumber;
  metadataHash: string;
}
export type ProductAddedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  ProductAddedEventObject
>;

export type ProductAddedEventFilter = TypedEventFilter<ProductAddedEvent>;

export interface ProductListing extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProductListingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addProduct(
      name: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      metadataHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getProduct(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ProductListing.ProductStructOutput]>;

    getProductsBySeller(
      seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    productCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    products(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, string] & {
        id: BigNumber;
        seller: string;
        name: string;
        price: BigNumber;
        metadataHash: string;
      }
    >;

    sellerProducts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addProduct(
    name: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    metadataHash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getProduct(
    productId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ProductListing.ProductStructOutput>;

  getProductsBySeller(
    seller: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  productCount(overrides?: CallOverrides): Promise<BigNumber>;

  products(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, string] & {
      id: BigNumber;
      seller: string;
      name: string;
      price: BigNumber;
      metadataHash: string;
    }
  >;

  sellerProducts(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addProduct(
      name: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      metadataHash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getProduct(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ProductListing.ProductStructOutput>;

    getProductsBySeller(
      seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    productCount(overrides?: CallOverrides): Promise<BigNumber>;

    products(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, string] & {
        id: BigNumber;
        seller: string;
        name: string;
        price: BigNumber;
        metadataHash: string;
      }
    >;

    sellerProducts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ProductAdded(uint256,address,string,uint256,string)"(
      id?: null,
      seller?: null,
      name?: null,
      price?: null,
      metadataHash?: null
    ): ProductAddedEventFilter;
    ProductAdded(
      id?: null,
      seller?: null,
      name?: null,
      price?: null,
      metadataHash?: null
    ): ProductAddedEventFilter;
  };

  estimateGas: {
    addProduct(
      name: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      metadataHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getProduct(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProductsBySeller(
      seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    productCount(overrides?: CallOverrides): Promise<BigNumber>;

    products(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellerProducts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addProduct(
      name: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      metadataHash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getProduct(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProductsBySeller(
      seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    productCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    products(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellerProducts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
