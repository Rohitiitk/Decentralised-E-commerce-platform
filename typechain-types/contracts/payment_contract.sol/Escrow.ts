/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface EscrowInterface extends utils.Interface {
  functions: {
    "agreementCount()": FunctionFragment;
    "agreements(uint256)": FunctionFragment;
    "autoRelease(uint256)": FunctionFragment;
    "createAgreement(address,uint256,address,uint256)": FunctionFragment;
    "releaseFunds(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "agreementCount"
      | "agreements"
      | "autoRelease"
      | "createAgreement"
      | "releaseFunds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "agreementCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "agreements",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "autoRelease",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAgreement",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseFunds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "agreementCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "agreements", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "autoRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseFunds",
    data: BytesLike
  ): Result;

  events: {
    "AgreementCreated(uint256,address,address,uint256,address,uint256)": EventFragment;
    "AutoReleased(uint256)": EventFragment;
    "FundsReleased(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AutoReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsReleased"): EventFragment;
}

export interface AgreementCreatedEventObject {
  agreementId: BigNumber;
  buyer: string;
  seller: string;
  amount: BigNumber;
  token: string;
  deadline: BigNumber;
}
export type AgreementCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string, BigNumber],
  AgreementCreatedEventObject
>;

export type AgreementCreatedEventFilter =
  TypedEventFilter<AgreementCreatedEvent>;

export interface AutoReleasedEventObject {
  agreementId: BigNumber;
}
export type AutoReleasedEvent = TypedEvent<
  [BigNumber],
  AutoReleasedEventObject
>;

export type AutoReleasedEventFilter = TypedEventFilter<AutoReleasedEvent>;

export interface FundsReleasedEventObject {
  agreementId: BigNumber;
  seller: string;
}
export type FundsReleasedEvent = TypedEvent<
  [BigNumber, string],
  FundsReleasedEventObject
>;

export type FundsReleasedEventFilter = TypedEventFilter<FundsReleasedEvent>;

export interface Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    agreementCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    agreements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, BigNumber, boolean] & {
        buyer: string;
        seller: string;
        amount: BigNumber;
        token: string;
        deadline: BigNumber;
        isCompleted: boolean;
      }
    >;

    autoRelease(
      agreementId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAgreement(
      _seller: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    releaseFunds(
      agreementId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  agreementCount(overrides?: CallOverrides): Promise<BigNumber>;

  agreements(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, BigNumber, boolean] & {
      buyer: string;
      seller: string;
      amount: BigNumber;
      token: string;
      deadline: BigNumber;
      isCompleted: boolean;
    }
  >;

  autoRelease(
    agreementId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAgreement(
    _seller: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  releaseFunds(
    agreementId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    agreementCount(overrides?: CallOverrides): Promise<BigNumber>;

    agreements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, BigNumber, boolean] & {
        buyer: string;
        seller: string;
        amount: BigNumber;
        token: string;
        deadline: BigNumber;
        isCompleted: boolean;
      }
    >;

    autoRelease(
      agreementId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createAgreement(
      _seller: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseFunds(
      agreementId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AgreementCreated(uint256,address,address,uint256,address,uint256)"(
      agreementId?: null,
      buyer?: null,
      seller?: null,
      amount?: null,
      token?: null,
      deadline?: null
    ): AgreementCreatedEventFilter;
    AgreementCreated(
      agreementId?: null,
      buyer?: null,
      seller?: null,
      amount?: null,
      token?: null,
      deadline?: null
    ): AgreementCreatedEventFilter;

    "AutoReleased(uint256)"(agreementId?: null): AutoReleasedEventFilter;
    AutoReleased(agreementId?: null): AutoReleasedEventFilter;

    "FundsReleased(uint256,address)"(
      agreementId?: null,
      seller?: null
    ): FundsReleasedEventFilter;
    FundsReleased(agreementId?: null, seller?: null): FundsReleasedEventFilter;
  };

  estimateGas: {
    agreementCount(overrides?: CallOverrides): Promise<BigNumber>;

    agreements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    autoRelease(
      agreementId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAgreement(
      _seller: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    releaseFunds(
      agreementId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    agreementCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    agreements(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    autoRelease(
      agreementId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAgreement(
      _seller: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    releaseFunds(
      agreementId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
