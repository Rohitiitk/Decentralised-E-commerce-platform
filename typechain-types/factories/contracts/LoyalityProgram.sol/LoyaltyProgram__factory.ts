/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  LoyaltyProgram,
  LoyaltyProgramInterface,
} from "../../../contracts/LoyalityProgram.sol/LoyaltyProgram";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_loyaltyToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "LoyaltyTokensIssued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "redemptionType",
        type: "string",
      },
    ],
    name: "LoyaltyTokensRedeemed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_buyer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "adjustLoyaltyBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_purchaseAmount",
        type: "uint256",
      },
    ],
    name: "calculateLoyaltyTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_buyer",
        type: "address",
      },
    ],
    name: "getLoyaltyBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_buyer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_purchaseAmount",
        type: "uint256",
      },
    ],
    name: "issueLoyaltyTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "loyaltyBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "loyaltyToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "purchaseCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_redemptionType",
        type: "string",
      },
    ],
    name: "redeemLoyaltyTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610b16380380610b16833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b6109ff806101176000396000f3fe608060405234801561001057600080fd5b50600436106100875760003560e01c8063770aa84d1161005b578063770aa84d146101245780638b74d5cc14610142578063bfb89d9714610172578063c29bbcf1146101a257610087565b80627e07701461008c578063057bef51146100bc5780633880d92f146100d857806347915a29146100f4575b600080fd5b6100a660048036038101906100a191906104d9565b6101be565b6040516100b39190610515565b60405180910390f35b6100d660048036038101906100d1919061058e565b6101c8565b005b6100f260048036038101906100ed9190610714565b610210565b005b61010e60048036038101906101099190610770565b61033c565b60405161011b9190610515565b60405180910390f35b61012c610385565b60405161013991906107fc565b60405180910390f35b61015c60048036038101906101579190610770565b6103a9565b6040516101699190610515565b60405180910390f35b61018c60048036038101906101879190610770565b6103c1565b6040516101999190610515565b60405180910390f35b6101bc60048036038101906101b7919061058e565b6103d9565b005b6000819050919050565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610292576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028990610874565b60405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102e191906108c3565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fed503a0e7cd8ba50c5eaa74e98c6fb4204a5edcb67144bbc9cb726d588a750688383604051610330929190610965565b60405180910390a25050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b60026020528060005260406000206000915090505481565b60006103e4826101be565b905080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104359190610995565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167facba29ea6a174648f95265989265ac5a38399550ef8e52a3e328081055563504826040516104829190610515565b60405180910390a2505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6104b6816104a3565b81146104c157600080fd5b50565b6000813590506104d3816104ad565b92915050565b6000602082840312156104ef576104ee610499565b5b60006104fd848285016104c4565b91505092915050565b61050f816104a3565b82525050565b600060208201905061052a6000830184610506565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061055b82610530565b9050919050565b61056b81610550565b811461057657600080fd5b50565b60008135905061058881610562565b92915050565b600080604083850312156105a5576105a4610499565b5b60006105b385828601610579565b92505060206105c4858286016104c4565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610621826105d8565b810181811067ffffffffffffffff821117156106405761063f6105e9565b5b80604052505050565b600061065361048f565b905061065f8282610618565b919050565b600067ffffffffffffffff82111561067f5761067e6105e9565b5b610688826105d8565b9050602081019050919050565b82818337600083830152505050565b60006106b76106b284610664565b610649565b9050828152602081018484840111156106d3576106d26105d3565b5b6106de848285610695565b509392505050565b600082601f8301126106fb576106fa6105ce565b5b813561070b8482602086016106a4565b91505092915050565b6000806040838503121561072b5761072a610499565b5b6000610739858286016104c4565b925050602083013567ffffffffffffffff81111561075a5761075961049e565b5b610766858286016106e6565b9150509250929050565b60006020828403121561078657610785610499565b5b600061079484828501610579565b91505092915050565b6000819050919050565b60006107c26107bd6107b884610530565b61079d565b610530565b9050919050565b60006107d4826107a7565b9050919050565b60006107e6826107c9565b9050919050565b6107f6816107db565b82525050565b600060208201905061081160008301846107ed565b92915050565b600082825260208201905092915050565b7f496e73756666696369656e74206c6f79616c747920746f6b656e730000000000600082015250565b600061085e601b83610817565b915061086982610828565b602082019050919050565b6000602082019050818103600083015261088d81610851565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108ce826104a3565b91506108d9836104a3565b92508282039050818111156108f1576108f0610894565b5b92915050565b600081519050919050565b60005b83811015610920578082015181840152602081019050610905565b60008484015250505050565b6000610937826108f7565b6109418185610817565b9350610951818560208601610902565b61095a816105d8565b840191505092915050565b600060408201905061097a6000830185610506565b818103602083015261098c818461092c565b90509392505050565b60006109a0826104a3565b91506109ab836104a3565b92508282019050808211156109c3576109c2610894565b5b9291505056fea2646970667358221220e175c61385897e4ba85a318f6162076bc24bc139c128876c4eaa11dbd4e5bb8864736f6c634300081c0033";

type LoyaltyProgramConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LoyaltyProgramConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LoyaltyProgram__factory extends ContractFactory {
  constructor(...args: LoyaltyProgramConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _loyaltyToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LoyaltyProgram> {
    return super.deploy(
      _loyaltyToken,
      overrides || {}
    ) as Promise<LoyaltyProgram>;
  }
  override getDeployTransaction(
    _loyaltyToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_loyaltyToken, overrides || {});
  }
  override attach(address: string): LoyaltyProgram {
    return super.attach(address) as LoyaltyProgram;
  }
  override connect(signer: Signer): LoyaltyProgram__factory {
    return super.connect(signer) as LoyaltyProgram__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LoyaltyProgramInterface {
    return new utils.Interface(_abi) as LoyaltyProgramInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LoyaltyProgram {
    return new Contract(address, _abi, signerOrProvider) as LoyaltyProgram;
  }
}
